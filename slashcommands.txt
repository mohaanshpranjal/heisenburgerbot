[
    {
        "name": "play",
        "description": "Plays a song from youtube",
        "options": [
            {
                "name": "query",
                "type": 3,
                "description": "The song you want to play",
                "required": true
            }
        ]
    },
    {
        "name": "skip",
        "description": "Skip to the next song"
    },
    {
        "name": "queue",
        "description": "See the queue"
    },
    {
        "name": "stop",
        "description": "Stop the player"
    },
    {
        "name": "test",
        "description": "A test command"
   }
]


client.on("interactionCreate", async (interaction) => {

    // play command

    if (interaction.commandName === "play") {
        await interaction.deferReply();

        const query = interaction.options.get("query").value;
        /*
        console.log(query)
        const searchResult = await player
            .search(query, {
                requestedBy: interaction.user,
                searchEngine: QueryType.AUTO
            })
            .catch(() => {});
        if (!searchResult || !searchResult.tracks.length) return void interaction.followUp({ content: "No results were found!" });

        const queue = await player.createQueue(interaction.guild, {
            metadata: interaction.channel
        });
    
        try {
            if (!queue.connection) await queue.connect(interaction.member.voice.channel);
        } catch {
            void player.deleteQueue(interaction.guildId);
            return void interaction.followUp({ content: "Could not join your voice channel!" });
        }
    
        await interaction.followUp({ content: `‚è± | Loading your ${searchResult.playlist ? "playlist" : "track"}...` });
        searchResult.playlist ? queue.addTracks(searchResult.tracks) : queue.addTrack(searchResult.tracks[0]);
        if (!queue.playing) await queue.play();
        */
        try {
            const { track } = await player.play(interaction.member.voice.channelId, query);
            console.log(`üéâ I am playing ${track.title} üéâ`);
        } catch(e) {
            console.log(`üò≠ Failed to play error oh no:\n\n${e}`);
        }
    }

    // skip command

    if (interaction.commandName === "skip") {
        await interaction.deferReply();
        const queue = player.getQueue(interaction.guildId);
        if (!queue || !queue.playing) return void interaction.followUp({ content: "‚ùå | No music is being played!" });
        const currentTrack = queue.current;
        const success = queue.skip();
        return void interaction.followUp({
            content: success ? `‚úÖ | Skipped **${currentTrack}**!` : "‚ùå | Something went wrong!"
        });
    }

    // shuffle command

    if (interaction.commandName === "shuffle") {
        await interaction.deferReply();
        const queue = player.getQueue(interaction.guildId);
        if (!queue) return void interaction.followUp({ content: "‚ùå | Queue is empty!" });
        // const currentTrack = queue.current;
        const success = queue.shuffle();
        return void interaction.followUp({
            content: success ? `‚úÖ | Shuffled queue!` : "‚ùå | Something went wrong!"
        });
    }

    // stop command

    else if (interaction.commandName === "stop") {
        await interaction.deferReply();
        const queue = player.getQueue(interaction.guildId);
        if (!queue || !queue.playing) return void interaction.followUp({ content: "‚ùå | No music is being played!" });
        queue.destroy();
        return void interaction.followUp({ content: "üõë | Stopped the player!" });
    }
    

});